import express = require('express');

import * as winston from 'winston';
import * as expressWinston from 'express-winston';
import cors = require('cors');
import bodyParser from "body-parser";
const swaggerUi = require('swagger-ui-express');

//generated by tsoa on npm build
import { RegisterRoutes } from "../build/routes";
import * as swagger from "../build/swagger.json";

import debug from 'debug';

const app: express.Application = express();
const port = 3000;
const debugLog: debug.IDebugger = debug('app');

// here we are adding middleware to parse all incoming requests as JSON
app.use(express.json());

// here we are adding middleware to allow cross-origin requests
app.use(cors());

// here we are preparing the expressWinston logging middleware configuration,
// which will automatically log all HTTP requests handled by Express.js
const loggerOptions: expressWinston.LoggerOptions = {
    transports: [new winston.transports.Console()],
    format: winston.format.combine(
        winston.format.json(),
        winston.format.prettyPrint(),
        winston.format.colorize({ all: true })
    ),
};

// here we are crashing on unhandled errors and spitting out a stack trace,
// but only when in debug mode
if (process.env.DEBUG) {
    process.on('unhandledRejection', function(reason) {
        debugLog('Unhandled Rejection:', reason);
        process.exit(1);
    });
} else {
    loggerOptions.meta = false; // when not debugging, make terse
}

// initialize the logger with the above configuration
app.use(expressWinston.logger(loggerOptions));

// Use body parser to read sent json payloads
app.use(
    bodyParser.urlencoded({
        extended: true,
    })
);
app.use(bodyParser.json());

// this is a simple route to make sure everything is working properly
app.get('/', (req: express.Request, res: express.Response) => {
    res.status(200).send(`Server up and running!`)
});

//init TSOA
RegisterRoutes(app);

//init Swagger
app.get('/api-docs.swagger', (req: express.Request, res: express.Response) => {
    res.status(200).send(swagger)
});

//init Swagger-UI
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swagger));

app.listen(port, () =>
    console.log(`VTuber Dashboard Backend listening at http://localhost:${port}/api-docs/`)
);
